//
//  HangmanKit.swift
//  (null)
//
//  Created on 13.06.21.
//  Copyright Â© 2021 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class HangmanKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawHangman(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 400), resizing: ResizingBehavior = .aspectFit, strokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), progress: CGFloat = 13) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 400), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 400)



        //// Variable Declarations
        let v0 = progress > 0
        let v1 = progress > 1
        let v2 = progress > 2
        let v3 = progress > 3
        let v4 = progress > 4
        let v5 = progress > 5
        let v6 = progress > 6
        let v7 = progress > 7
        let v8 = progress > 8
        let v9 = progress > 9
        let v10 = progress > 10
        let v11 = progress > 11
        let v12 = progress > 12

        //// Group 2
        if (v12) {
            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 244, y: 220.9))
            bezier8Path.addCurve(to: CGPoint(x: 260.69, y: 258.45), controlPoint1: CGPoint(x: 252.35, y: 234.92), controlPoint2: CGPoint(x: 257.92, y: 247.43))
            bezier8Path.addCurve(to: CGPoint(x: 265.5, y: 310.5), controlPoint1: CGPoint(x: 263.46, y: 269.46), controlPoint2: CGPoint(x: 265.07, y: 286.81))
            strokeColor.setStroke()
            bezier8Path.lineWidth = 7
            bezier8Path.miterLimit = 7
            bezier8Path.lineCapStyle = .round
            bezier8Path.stroke()
        }


        if (v11) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 243.5, y: 220.9))
            bezier7Path.addCurve(to: CGPoint(x: 226.81, y: 258.45), controlPoint1: CGPoint(x: 235.15, y: 234.92), controlPoint2: CGPoint(x: 229.58, y: 247.43))
            bezier7Path.addCurve(to: CGPoint(x: 222, y: 310.5), controlPoint1: CGPoint(x: 224.04, y: 269.46), controlPoint2: CGPoint(x: 222.43, y: 286.81))
            strokeColor.setStroke()
            bezier7Path.lineWidth = 7
            bezier7Path.miterLimit = 7
            bezier7Path.lineCapStyle = .round
            bezier7Path.stroke()
        }


        if (v10) {
            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 243.82, y: 146.27))
            bezier11Path.addCurve(to: CGPoint(x: 268.82, y: 158.42), controlPoint1: CGPoint(x: 254.33, y: 147.7), controlPoint2: CGPoint(x: 262.66, y: 151.75))
            bezier11Path.addCurve(to: CGPoint(x: 278.5, y: 199.5), controlPoint1: CGPoint(x: 274.98, y: 165.09), controlPoint2: CGPoint(x: 278.21, y: 178.79))
            strokeColor.setStroke()
            bezier11Path.lineWidth = 7
            bezier11Path.miterLimit = 7
            bezier11Path.lineCapStyle = .round
            bezier11Path.stroke()
        }


        if (v9) {
            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 243.5, y: 146.27))
            bezier10Path.addCurve(to: CGPoint(x: 218.5, y: 158.42), controlPoint1: CGPoint(x: 232.99, y: 147.7), controlPoint2: CGPoint(x: 224.66, y: 151.75))
            bezier10Path.addCurve(to: CGPoint(x: 208.82, y: 199.5), controlPoint1: CGPoint(x: 212.34, y: 165.09), controlPoint2: CGPoint(x: 209.11, y: 178.79))
            strokeColor.setStroke()
            bezier10Path.lineWidth = 7
            bezier10Path.miterLimit = 7
            bezier10Path.lineCapStyle = .round
            bezier10Path.stroke()
        }


        if (v8) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 243.5, y: 128.5))
            bezierPath.addLine(to: CGPoint(x: 243.5, y: 220.5))
            strokeColor.setStroke()
            bezierPath.lineWidth = 7
            bezierPath.miterLimit = 7
            bezierPath.lineCapStyle = .round
            bezierPath.stroke()
        }


        if (v7) {
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 223, y: 88, width: 40, height: 40))
            strokeColor.setStroke()
            ovalPath.lineWidth = 7
            ovalPath.stroke()
        }


        if (v6) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 243.5, y: 14.5))
            bezier2Path.addLine(to: CGPoint(x: 243.5, y: 87.5))
            strokeColor.setStroke()
            bezier2Path.lineWidth = 3
            bezier2Path.miterLimit = 3
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()
        }


        if (v5) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 105.5, y: 15.5))
            bezier3Path.addLine(to: CGPoint(x: 62.5, y: 58.5))
            strokeColor.setStroke()
            bezier3Path.lineWidth = 5
            bezier3Path.miterLimit = 5
            bezier3Path.lineCapStyle = .round
            bezier3Path.stroke()
        }


        if (v4) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 243.5, y: 15.5))
            bezier4Path.addLine(to: CGPoint(x: 62.5, y: 15.5))
            strokeColor.setStroke()
            bezier4Path.lineWidth = 5
            bezier4Path.miterLimit = 5
            bezier4Path.lineCapStyle = .round
            bezier4Path.stroke()
        }


        if (v3) {
            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 62.5, y: 310.5))
            bezier9Path.addLine(to: CGPoint(x: 105.5, y: 383.5))
            strokeColor.setStroke()
            bezier9Path.lineWidth = 5
            bezier9Path.miterLimit = 5
            bezier9Path.lineCapStyle = .round
            bezier9Path.stroke()
        }


        if (v2) {
            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 62.5, y: 310.5))
            bezier6Path.addLine(to: CGPoint(x: 19.5, y: 383.5))
            strokeColor.setStroke()
            bezier6Path.lineWidth = 5
            bezier6Path.miterLimit = 5
            bezier6Path.lineCapStyle = .round
            bezier6Path.stroke()
        }


        if (v1) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 62.5, y: 15.5))
            bezier5Path.addLine(to: CGPoint(x: 62.5, y: 383.5))
            strokeColor.setStroke()
            bezier5Path.lineWidth = 5
            bezier5Path.miterLimit = 5
            bezier5Path.lineCapStyle = .round
            bezier5Path.stroke()
        }


        if (v0) {
            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 105.5, y: 383.5))
            bezier12Path.addLine(to: CGPoint(x: 19.5, y: 383.5))
            strokeColor.setStroke()
            bezier12Path.lineWidth = 5
            bezier12Path.miterLimit = 5
            bezier12Path.lineCapStyle = .round
            bezier12Path.stroke()
        }
        
        context.restoreGState()

    }




    @objc(HangmanKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
